// <auto-generated />
using System;
using LearnQuestV1.EF.Application;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LearnQuestV1.EF.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250620112442_EnhanceStudentFeaturesConfiguration")]
    partial class EnhanceStudentFeaturesConfiguration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LearnQuestV1.Core.Models.Administration.AdminActionLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionDetails")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<int?>("TargetUserId")
                        .HasColumnType("int");

                    b.HasKey("LogId");

                    b.HasIndex("AdminId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("AdminActionLogs");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Administration.SecurityAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailAttempted")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EventDetails")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("GeoLocation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<int>("RiskScore")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SecurityAuditLogs");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Communication.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NotificationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.CourseOrganization.CourseTrack", b =>
                {
                    b.Property<int>("TrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrackDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TrackImage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TrackName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("TrackId");

                    b.ToTable("CourseTracks");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.CourseOrganization.CourseTrackCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TrackId");

                    b.ToTable("CourseTrackCourses");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.CourseOrganization.FavoriteCourse", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteId"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FavoriteId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteCourses");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.CourseStructure.AboutCourse", b =>
                {
                    b.Property<int>("AboutCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AboutCourseId"));

                    b.Property<string>("AboutCourseText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("OutcomeType")
                        .HasColumnType("int");

                    b.HasKey("AboutCourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("AboutCourses");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.CourseStructure.Content", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentId"));

                    b.Property<string>("ContentDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ContentDoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContentOrder")
                        .HasColumnType("int");

                    b.Property<string>("ContentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContentType")
                        .HasColumnType("int");

                    b.Property<string>("ContentUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ContentId");

                    b.HasIndex("SectionId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.CourseStructure.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CourseImage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CourseLevel")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("CoursePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasCertificate")
                        .HasColumnType("bit");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.HasKey("CourseId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.CourseStructure.CourseSkill", b =>
                {
                    b.Property<int>("CourseSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseSkillId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("CourseSkillText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CourseSkillId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseSkills");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.CourseStructure.Level", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LevelId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("LevelDetails")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("LevelOrder")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresPreviousLevelCompletion")
                        .HasColumnType("bit");

                    b.HasKey("LevelId");

                    b.HasIndex("CourseId");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.CourseStructure.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresPreviousSectionCompletion")
                        .HasColumnType("bit");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("SectionOrder")
                        .HasColumnType("int");

                    b.HasKey("SectionId");

                    b.HasIndex("LevelId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.FeedbackAndReviews.CourseFeedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseFeedbacks");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.FeedbackAndReviews.CourseReview", b =>
                {
                    b.Property<int>("CourseReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseReviewId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewComment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CourseReviewId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseReviews");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Financial.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentUses")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DiscountName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxUses")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaximumDiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinimumOrderValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("DiscountId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Financial.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Financial.PaymentTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<string>("Currency")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ExternalTransactionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentProvider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ProcessingFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RetryCount")
                        .HasColumnType("int");

                    b.Property<string>("TransactionDetails")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("TransactionId");

                    b.HasIndex("PaymentId");

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.LearningAndProgress.CourseEnrollment", b =>
                {
                    b.Property<int>("CourseEnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseEnrollmentId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrolledAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CourseEnrollmentId");

                    b.HasIndex("UserId");

                    b.HasIndex("CourseId", "UserId")
                        .IsUnique();

                    b.ToTable("CourseEnrollments");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.LearningAndProgress.CoursePoints", b =>
                {
                    b.Property<int>("CoursePointsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoursePointsId"));

                    b.Property<int>("BonusPoints")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentRank")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("PenaltyPoints")
                        .HasColumnType("int");

                    b.Property<int>("QuizPoints")
                        .HasColumnType("int");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CoursePointsId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("CoursePoints");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.LearningAndProgress.PointTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int?>("AwardedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CoursePointsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Metadata")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("PointsAfterTransaction")
                        .HasColumnType("int");

                    b.Property<int>("PointsChanged")
                        .HasColumnType("int");

                    b.Property<int?>("QuizAttemptId")
                        .HasColumnType("int");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("AwardedByUserId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CoursePointsId");

                    b.HasIndex("QuizAttemptId");

                    b.HasIndex("UserId");

                    b.ToTable("PointTransactions");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.LearningAndProgress.UserContentActivity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"));

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ActivityId");

                    b.HasIndex("ContentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserContentActivities");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.LearningAndProgress.UserCoursePoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCoursePoints");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.LearningAndProgress.UserProgress", b =>
                {
                    b.Property<int>("UserProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserProgressId"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentContentId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentLevelId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentSectionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserProgressId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CurrentContentId");

                    b.HasIndex("CurrentLevelId");

                    b.HasIndex("CurrentSectionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProgress");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Quiz.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("CodeSnippet")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Explanation")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("HasCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("ProgrammingLanguage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("QuestionId");

                    b.HasIndex("ContentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("QuestionType");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Quiz.QuestionOption", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionId"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuestionId", "OrderIndex");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Quiz.Quiz", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizId"));

                    b.Property<int?>("ContentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.Property<int>("MaxAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(3);

                    b.Property<int>("PassingScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(70);

                    b.Property<int>("QuizType")
                        .HasColumnType("int");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeLimitInMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("QuizId");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("LevelId");

                    b.HasIndex("QuizType");

                    b.HasIndex("SectionId");

                    b.HasIndex("ContentId", "SectionId", "LevelId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Quiz.QuizAttempt", b =>
                {
                    b.Property<int>("AttemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttemptId"));

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Passed")
                        .HasColumnType("bit");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TimeTakenInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AttemptId");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.HasIndex("QuizId", "UserId", "AttemptNumber")
                        .IsUnique();

                    b.ToTable("QuizAttempts");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Quiz.QuizQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomPoints")
                        .HasColumnType("int");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizId", "OrderIndex");

                    b.HasIndex("QuizId", "QuestionId")
                        .IsUnique();

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Quiz.UserAnswer", b =>
                {
                    b.Property<int>("UserAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserAnswerId"));

                    b.Property<DateTime>("AnsweredAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("AttemptId")
                        .HasColumnType("int");

                    b.Property<bool?>("BooleanAnswer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("PointsEarned")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("SelectedOptionId")
                        .HasColumnType("int");

                    b.HasKey("UserAnswerId");

                    b.HasIndex("AttemptId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.HasIndex("AttemptId", "QuestionId")
                        .IsUnique();

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemProtected")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePhoto")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.AccountVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CheckedOK")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AccountVerifications");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.Achievement", b =>
                {
                    b.Property<int>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AchievementId"));

                    b.Property<string>("BadgeColor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BadgeIcon")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Criteria")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DefaultPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsRare")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AchievementId");

                    b.HasIndex("Category");

                    b.HasIndex("IsActive");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.BlacklistToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BlacklistTokens");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.StudySession", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionId"));

                    b.Property<int?>("ActualDurationMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EffectivenessRating")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("PlannedDurationMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("StudyPlanId")
                        .HasColumnType("int");

                    b.HasKey("SessionId");

                    b.HasIndex("StudyPlanId");

                    b.ToTable("StudySessions");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.StudySessionContent", b =>
                {
                    b.Property<int>("SessionContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionContentId"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<int>("EstimatedDurationMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.HasKey("SessionContentId");

                    b.HasIndex("ContentId");

                    b.HasIndex("SessionId");

                    b.ToTable("StudySessionContents");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.UserAchievement", b =>
                {
                    b.Property<int>("UserAchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserAchievementId"));

                    b.Property<int>("AchievementId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("EarnedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("PointsAwarded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserAchievementId");

                    b.HasIndex("AchievementId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "AchievementId")
                        .IsUnique();

                    b.ToTable("UserAchievements");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.UserBookmark", b =>
                {
                    b.Property<int>("BookmarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookmarkId"));

                    b.Property<DateTime>("BookmarkedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookmarkId");

                    b.HasIndex("ContentId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "ContentId")
                        .IsUnique();

                    b.ToTable("UserBookmarks");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.UserDetail", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EducationLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.UserLearningAnalytics", b =>
                {
                    b.Property<int>("AnalyticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnalyticsId"));

                    b.Property<DateTime>("AnalyticsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CAST(GETUTCDATE() AS DATE)");

                    b.Property<decimal>("AverageQuizScore")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("CompletionRate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("DailyAverageSessionLength")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("DailyContentCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("DailyLearningMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("DailySessions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("MetDailyGoal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("MetWeeklyGoal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MostActiveDay")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PreferredContentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PreferredLearningHour")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TotalPointsEarned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AnalyticsId");

                    b.HasIndex("AnalyticsDate");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "AnalyticsDate")
                        .IsUnique();

                    b.ToTable("UserLearningAnalytics");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.UserLearningGoal", b =>
                {
                    b.Property<int>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GoalId"));

                    b.Property<DateTime?>("AchievedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("DailyTargetMinutes")
                        .HasColumnType("int");

                    b.Property<string>("GoalDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("GoalType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAchieved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PreferredStudyDays")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PreferredStudyTime")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("SendReminders")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WeeklyTargetMinutes")
                        .HasColumnType("int");

                    b.HasKey("GoalId");

                    b.HasIndex("CourseId");

                    b.HasIndex("IsActive");

                    b.HasIndex("UserId");

                    b.ToTable("UserLearningGoals");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.UserLearningSession", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionId"));

                    b.Property<int?>("ContentsViewed")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("DeviceType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SectionsCompleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TotalMinutes")
                        .HasColumnType("int");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SessionId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLearningSessions");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.UserLearningStreak", b =>
                {
                    b.Property<int>("StreakId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StreakId"));

                    b.Property<int>("CurrentStreak")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CurrentWeekDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("HasMetWeeklyGoal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsStreakActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastLearningDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("LongestStreak")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("StreakStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("WeekStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeeklyGoalDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.HasKey("StreakId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserLearningStreaks");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.UserNotification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int?>("AchievementId")
                        .HasColumnType("int");

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ContentId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Normal");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("AchievementId");

                    b.HasIndex("ContentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsRead");

                    b.HasIndex("Type");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.UserPreferences", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("CourseReminders")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DailyLearningGoalMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("EmailNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("HighContrast")
                        .HasColumnType("bit");

                    b.Property<string>("LearningStyle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("MarketingEmails")
                        .HasColumnType("bit");

                    b.Property<string>("PreferredLanguage")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("ProgressUpdates")
                        .HasColumnType("bit");

                    b.Property<bool>("PublicProfile")
                        .HasColumnType("bit");

                    b.Property<bool>("ReducedMotion")
                        .HasColumnType("bit");

                    b.Property<bool>("ShareProgress")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowOnLeaderboard")
                        .HasColumnType("bit");

                    b.Property<string>("Theme")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.UserStudyPlan", b =>
                {
                    b.Property<int>("StudyPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudyPlanId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DailyStudyMinutes")
                        .HasColumnType("int");

                    b.Property<int>("DaysAhead")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnTrack")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAdjustedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PlanProgressPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("PreferredStudyDays")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PreferredStudyTime")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("TargetCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("StudyPlanId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("UserStudyPlans");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.UserVisitHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastVisit")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserVisitHistory");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Administration.AdminActionLog", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.User", "Admin")
                        .WithMany("AdminActionsPerformed")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.User", "TargetUser")
                        .WithMany("AdminActionsReceived")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Admin");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Administration.SecurityAuditLog", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany("SecurityAuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Communication.Notification", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.CourseOrganization.CourseTrackCourse", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Course", "Course")
                        .WithMany("CourseTrackCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.CourseOrganization.CourseTrack", "CourseTrack")
                        .WithMany("CourseTrackCourses")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CourseTrack");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.CourseOrganization.FavoriteCourse", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Course", "Course")
                        .WithMany("FavoriteCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany("FavoriteCourses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.CourseStructure.AboutCourse", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Course", "Course")
                        .WithMany("AboutCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.CourseStructure.Content", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Section", "Section")
                        .WithMany("Contents")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.CourseStructure.Course", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.User", "Instructor")
                        .WithMany("CoursesTaught")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.CourseStructure.CourseSkill", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Course", "Course")
                        .WithMany("CourseSkills")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.CourseStructure.Level", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Course", "Course")
                        .WithMany("Levels")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.CourseStructure.Section", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Level", "Level")
                        .WithMany("Sections")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Level");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.FeedbackAndReviews.CourseFeedback", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Course", "Course")
                        .WithMany("CourseFeedbacks")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany("CourseFeedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.FeedbackAndReviews.CourseReview", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Course", "Course")
                        .WithMany("CourseReviews")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany("CourseReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Financial.Payment", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Course", "Course")
                        .WithMany("Payments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Financial.PaymentTransaction", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.Financial.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.LearningAndProgress.CourseEnrollment", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Course", "Course")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.LearningAndProgress.CoursePoints", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.LearningAndProgress.PointTransaction", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.User", "AwardedBy")
                        .WithMany()
                        .HasForeignKey("AwardedByUserId");

                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.LearningAndProgress.CoursePoints", "CoursePoints")
                        .WithMany("PointTransactions")
                        .HasForeignKey("CoursePointsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.Quiz.QuizAttempt", "QuizAttempt")
                        .WithMany()
                        .HasForeignKey("QuizAttemptId");

                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwardedBy");

                    b.Navigation("Course");

                    b.Navigation("CoursePoints");

                    b.Navigation("QuizAttempt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.LearningAndProgress.UserContentActivity", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Content", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.LearningAndProgress.UserCoursePoint", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Course", "Course")
                        .WithMany("UserCoursePoints")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany("UserCoursePoints")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.LearningAndProgress.UserProgress", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Course", "Course")
                        .WithMany("UserProgresses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Content", "CurrentContent")
                        .WithMany()
                        .HasForeignKey("CurrentContentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Level", "CurrentLevel")
                        .WithMany()
                        .HasForeignKey("CurrentLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Section", "CurrentSection")
                        .WithMany()
                        .HasForeignKey("CurrentSectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany("UserProgresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CurrentContent");

                    b.Navigation("CurrentLevel");

                    b.Navigation("CurrentSection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Quiz.Question", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Content", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.User", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Quiz.QuestionOption", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.Quiz.Question", "Question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Quiz.Quiz", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Content", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.User", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Content");

                    b.Navigation("Course");

                    b.Navigation("Instructor");

                    b.Navigation("Level");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Quiz.QuizAttempt", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizAttempts")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Quiz.QuizQuestion", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.Quiz.Question", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.Quiz.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Quiz.UserAnswer", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.Quiz.QuizAttempt", "Attempt")
                        .WithMany("UserAnswers")
                        .HasForeignKey("AttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.Quiz.Question", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.Quiz.QuestionOption", "SelectedOption")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Attempt");

                    b.Navigation("Question");

                    b.Navigation("SelectedOption");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.AccountVerification", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany("AccountVerifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.BlacklistToken", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.RefreshToken", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.StudySession", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.UserManagement.UserStudyPlan", "StudyPlan")
                        .WithMany("StudySessions")
                        .HasForeignKey("StudyPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StudyPlan");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.StudySessionContent", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Content", "Content")
                        .WithMany("StudySessionContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.UserManagement.StudySession", "StudySession")
                        .WithMany("Contents")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("StudySession");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.UserAchievement", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.UserManagement.Achievement", "Achievement")
                        .WithMany("UserAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Course", null)
                        .WithMany("UserAchievements")
                        .HasForeignKey("CourseId1");

                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.UserBookmark", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Content", "Content")
                        .WithMany("UserBookmarks")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany("UserBookmarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.UserDetail", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithOne("UserDetail")
                        .HasForeignKey("LearnQuestV1.Core.Models.UserManagement.UserDetail", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.UserLearningAnalytics", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany("UserLearningAnalytics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.UserLearningGoal", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Course", "Course")
                        .WithMany("UserLearningGoals")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany("UserLearningGoals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.UserLearningSession", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.UserLearningStreak", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany("UserLearningStreaks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.UserNotification", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.UserManagement.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Content", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("Content");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.UserPreferences", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.UserStudyPlan", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.CourseStructure.Course", "Course")
                        .WithMany("UserStudyPlans")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany("UserStudyPlans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.UserVisitHistory", b =>
                {
                    b.HasOne("LearnQuestV1.Core.Models.User", "User")
                        .WithMany("VisitHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.CourseOrganization.CourseTrack", b =>
                {
                    b.Navigation("CourseTrackCourses");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.CourseStructure.Content", b =>
                {
                    b.Navigation("StudySessionContents");

                    b.Navigation("UserBookmarks");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.CourseStructure.Course", b =>
                {
                    b.Navigation("AboutCourses");

                    b.Navigation("CourseEnrollments");

                    b.Navigation("CourseFeedbacks");

                    b.Navigation("CourseReviews");

                    b.Navigation("CourseSkills");

                    b.Navigation("CourseTrackCourses");

                    b.Navigation("FavoriteCourses");

                    b.Navigation("Levels");

                    b.Navigation("Payments");

                    b.Navigation("UserAchievements");

                    b.Navigation("UserCoursePoints");

                    b.Navigation("UserLearningGoals");

                    b.Navigation("UserProgresses");

                    b.Navigation("UserStudyPlans");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.CourseStructure.Level", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.CourseStructure.Section", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.LearningAndProgress.CoursePoints", b =>
                {
                    b.Navigation("PointTransactions");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Quiz.Question", b =>
                {
                    b.Navigation("QuestionOptions");

                    b.Navigation("QuizQuestions");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Quiz.QuestionOption", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Quiz.Quiz", b =>
                {
                    b.Navigation("QuizAttempts");

                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.Quiz.QuizAttempt", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.User", b =>
                {
                    b.Navigation("AccountVerifications");

                    b.Navigation("AdminActionsPerformed");

                    b.Navigation("AdminActionsReceived");

                    b.Navigation("CourseEnrollments");

                    b.Navigation("CourseFeedbacks");

                    b.Navigation("CourseReviews");

                    b.Navigation("CoursesTaught");

                    b.Navigation("FavoriteCourses");

                    b.Navigation("Payments");

                    b.Navigation("RefreshTokens");

                    b.Navigation("SecurityAuditLogs");

                    b.Navigation("UserAchievements");

                    b.Navigation("UserBookmarks");

                    b.Navigation("UserCoursePoints");

                    b.Navigation("UserDetail");

                    b.Navigation("UserLearningAnalytics");

                    b.Navigation("UserLearningGoals");

                    b.Navigation("UserLearningStreaks");

                    b.Navigation("UserNotifications");

                    b.Navigation("UserProgresses");

                    b.Navigation("UserStudyPlans");

                    b.Navigation("VisitHistories");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.Achievement", b =>
                {
                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.StudySession", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("LearnQuestV1.Core.Models.UserManagement.UserStudyPlan", b =>
                {
                    b.Navigation("StudySessions");
                });
#pragma warning restore 612, 618
        }
    }
}
